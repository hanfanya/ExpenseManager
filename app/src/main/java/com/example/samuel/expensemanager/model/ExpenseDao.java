package com.example.samuel.expensemanager.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "EXPENSE".
 */
public class ExpenseDao extends AbstractDao<Expense, Long> {

    public static final String TABLENAME = "EXPENSE";

    public ExpenseDao(DaoConfig config) {
        super(config);
    }

    ;


    public ExpenseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"EXPENSE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"EXPENSE_OBJECT_ID\" TEXT," + // 1: expenseObjectId
                "\"DATE\" TEXT," + // 2: date
                "\"FIGURE\" REAL," + // 3: figure
                "\"TYPE_NAME\" TEXT," + // 4: typeName
                "\"TYPE_COLOR\" INTEGER," + // 5: typeColor
                "\"TYPE_FLAG\" INTEGER," + // 6: typeFlag
                "\"UPLOAD_FLAG\" INTEGER);"); // 7: uploadFlag
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EXPENSE\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, Expense entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String expenseObjectId = entity.getExpenseObjectId();
        if (expenseObjectId != null) {
            stmt.bindString(2, expenseObjectId);
        }

        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(3, date);
        }

        Double figure = entity.getFigure();
        if (figure != null) {
            stmt.bindDouble(4, figure);
        }

        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(5, typeName);
        }

        Integer typeColor = entity.getTypeColor();
        if (typeColor != null) {
            stmt.bindLong(6, typeColor);
        }

        Integer typeFlag = entity.getTypeFlag();
        if (typeFlag != null) {
            stmt.bindLong(7, typeFlag);
        }

        Integer uploadFlag = entity.getUploadFlag();
        if (uploadFlag != null) {
            stmt.bindLong(8, uploadFlag);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public Expense readEntity(Cursor cursor, int offset) {
        Expense entity = new Expense( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // expenseObjectId
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // date
                cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // figure
                cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // typeName
                cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // typeColor
                cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // typeFlag
                cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // uploadFlag
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, Expense entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setExpenseObjectId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDate(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setFigure(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setTypeName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTypeColor(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setTypeFlag(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setUploadFlag(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(Expense entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(Expense entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity Expense.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ExpenseObjectId = new Property(1, String.class, "expenseObjectId", false, "EXPENSE_OBJECT_ID");
        public final static Property Date = new Property(2, String.class, "date", false, "DATE");
        public final static Property Figure = new Property(3, Double.class, "figure", false, "FIGURE");
        public final static Property TypeName = new Property(4, String.class, "typeName", false, "TYPE_NAME");
        public final static Property TypeColor = new Property(5, Integer.class, "typeColor", false, "TYPE_COLOR");
        public final static Property TypeFlag = new Property(6, Integer.class, "typeFlag", false, "TYPE_FLAG");
        public final static Property UploadFlag = new Property(7, Integer.class, "uploadFlag", false, "UPLOAD_FLAG");
    }

}
