package com.example.samuel.expensemanager.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "TYPE_INFO".
 */
public class TypeInfoDao extends AbstractDao<TypeInfo, Long> {

    public static final String TABLENAME = "TYPE_INFO";

    public TypeInfoDao(DaoConfig config) {
        super(config);
    }

    ;


    public TypeInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TYPE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TYPE_OBJECT_ID\" TEXT," + // 1: typeObjectId
                "\"TYPE_COLOR\" INTEGER," + // 2: typeColor
                "\"TYPE_NAME\" TEXT," + // 3: typeName
                "\"TYPE_FLAG\" INTEGER," + // 4: typeFlag
                "\"FREQUENCY\" INTEGER," + // 5: frequency
                "\"UPLOAD_FLAG\" INTEGER);"); // 6: uploadFlag
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TYPE_INFO\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, TypeInfo entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        String typeObjectId = entity.getTypeObjectId();
        if (typeObjectId != null) {
            stmt.bindString(2, typeObjectId);
        }

        Integer typeColor = entity.getTypeColor();
        if (typeColor != null) {
            stmt.bindLong(3, typeColor);
        }

        String typeName = entity.getTypeName();
        if (typeName != null) {
            stmt.bindString(4, typeName);
        }

        Integer typeFlag = entity.getTypeFlag();
        if (typeFlag != null) {
            stmt.bindLong(5, typeFlag);
        }

        Integer frequency = entity.getFrequency();
        if (frequency != null) {
            stmt.bindLong(6, frequency);
        }

        Integer uploadFlag = entity.getUploadFlag();
        if (uploadFlag != null) {
            stmt.bindLong(7, uploadFlag);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /** @inheritdoc */
    @Override
    public TypeInfo readEntity(Cursor cursor, int offset) {
        TypeInfo entity = new TypeInfo( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // typeObjectId
                cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // typeColor
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // typeName
                cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // typeFlag
                cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // frequency
                cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // uploadFlag
        );
        return entity;
    }

    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TypeInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTypeObjectId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTypeColor(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setTypeName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTypeFlag(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setFrequency(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setUploadFlag(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
     
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TypeInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TypeInfo entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }
    
    /** @inheritdoc */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

/**
     * Properties of entity TypeInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TypeObjectId = new Property(1, String.class, "typeObjectId", false, "TYPE_OBJECT_ID");
        public final static Property TypeColor = new Property(2, Integer.class, "typeColor", false, "TYPE_COLOR");
        public final static Property TypeName = new Property(3, String.class, "typeName", false, "TYPE_NAME");
        public final static Property TypeFlag = new Property(4, Integer.class, "typeFlag", false, "TYPE_FLAG");
        public final static Property Frequency = new Property(5, Integer.class, "frequency", false, "FREQUENCY");
        public final static Property UploadFlag = new Property(6, Integer.class, "uploadFlag", false, "UPLOAD_FLAG");
    }
    
}
